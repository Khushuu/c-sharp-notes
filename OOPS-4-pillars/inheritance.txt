
# Pillars of Object Oriented Programming (OOPS)

- inheritance
- encapsulation
- abstraction
- polymorphism

-----------------------------------------------------------------------------------------------------------------

# Inheritance

- move the common code in the base class
- only keep specific code in respective derived class

NOTE:
- c# only supports SINGLE CLASS INHERITANCE
- c# supports MULTIPLE INTERFACE INHERITANCE
- multi level class inheritance is supported i.e A <- B <- C <- D [A inherits from B, B from C, C from D]

- derived class inherits from base class
- child class is specialization of base class

- base class are automatically instantiated before derived class
- base class constructor executes before derived class constructor 
- use base keyword if u want to call specific constructor of base from derived class

- base class is also called parent class
- derived class is also called child class 

- e.g
	public class Base {

		public Base() {

			Console.WriteLine("base class constructor");
		}

		public Base(string message) {

			Console.WriteLine(message);
		}

		public void Print() {
			Console.WriteLine("this is base class print method");
		}
	}	

	public class Derived: Base {

		public Derived(): base("hello from derived") {

			Console.WriteLine("derived class constructor");
		}

		public new void Print() {
			Console.WriteLine("this is derived class print method");
		}
	}	

	Derived d = new Derived();

	// output 
	hello from derived
	derived class constructor

	- if base constructor was not controlled from derived constructor
	// output 
	base class constructor
	derived class constructor

-----------------------------------------------------------------------------------------------------------------

# Method Hiding 

- use new keyword if a method that is already in base class is written in derived class 
- doing this hides the method in the base class 
- derived class method is then called 

public new void print() {} // derived class method - this hides base class method 

- if u still want to call base class print method there r two ways 

- type casting 
- implicit casting 

((Base)d).Print(); // calls base class print method - type castig 

Base b = new Derived(); // a base class objects refers to child class 
// possible as b can be contained in Derived class
// it has all the members that base has  

b.Print(); // this will call the Print method of the base class

-----------------------------------------------------------------------------------------------------------------

NOTE: 
- if u write a constructor with parameters in base class u will also have to define a constructor with 0 parameters
- the default constructor won't be available anymore
- method calls must be inside a method, constructor, or property, not directly inside a class body

- derived class object is assigned to base class reference 
Base b = new Derived(); // this is valid 

-----------------------------------------------------------------------------------------------------------------

# Diamond problem - why multiple class inheritance

- suppose class B and class C inherit from class A
- both classes B and C have overridden a virtual method defined in class A
- if class D inherites from both class B and C and does not override method in class A
- then when object of class D invokes the method defined in A then which implementation of the method should be executed the one defined in B or C 

- this ambiguity is called diamond problem - called this because of the shape it forms 

-----------------------------------------------------------------------------------------------------------------

e.g 

// Diamond problem

public class A
{
	public virtual void Print()
	{
		Console.WriteLine("hello from A");
	}
}

public class B: A
{
	public override void Print()
	{
		Console.WriteLine("hello from B");
	}
}

public class C : A
{
	public override void Print()
	{
		Console.WriteLine("hello from C");
	}
}

// not allowed 
public class D : B, C
{
	
}

// d.Print() // which implementation to call 

-----------------------------------------------------------------------------------------------------------------

# Multiple interface inheritance to solve this issue

e.g 

public interface IA
{
	void PrintAA();
}

public class AA: IA
{
	public void PrintAA()
	{
		Console.WriteLine("print AA");
	}

}

public interface IB
{
	void PrintBB();
}

public class BB : IB
{
	public void PrintBB()
	{
		Console.WriteLine("print BB");
	}

}

// inherit from multiple interfaces instead of classes

public class CC: IA, IB
{
	AA a = new AA();
	BB b = new BB();

	// use same implementatin present in class AA and BB
	public void PrintAA()
	{
		a.PrintAA();
	}

	public void PrintBB()
	{
		b.PrintBB();
	}
}

CC cc = new CC();
cc.PrintAA();
cc.PrintBB();

// Output 
print AA
print BB
-----------------------------------------------------------------------------------------------------------------