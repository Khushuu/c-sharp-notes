# Multithreading in c#

# Process:

	-- process is what the operating system uses to facilitate the execution of a program
	-- by providing the resources required
	-- each process has a unique process id associated with it
	-- u can view the process withing which a program is executed using windows task manager 

-----------------------------------------------------------------------------------------------------------

# Thread:
	-- thread is a light weight process
	-- a process has at least one thread which is commonly called the main thread or UI thread 
	-- which executes the application code 
	-- a single process can have multiple threads 

	-- purpose of a thread is to execute a function that maybe takes a lot of time to execute 

NOTE: all threading related classes are present in System.Threading namespace 

-----------------------------------------------------------------------------------------------------------

e.g:
	// some code 
	
	// use another thread and pass the name of the function that should be executed by this other thread 
	Thread workerThread = new Thread(SomeTimeConsumingFunction);
	
	// to execute the function passed in the constructor 
	workerThread.Start(); 	

	// some code 

-----------------------------------------------------------------------------------------------------------

# Advantages and disadvantages of multithreading 

# Advantages
	-- to maintain a responsive user interface
	-- to make efficient use of processor time while waiting for I/O operations to complete
	-- to split large CPU bound tasks to be processed simultaneously on a machine 
	-- that has multiple processors/ cores

-----------------------------------------------------------------------------------------------------------

# Disadvantages
	-- on a single processor/core machine threading can affect performance negatively
	-- as there is overhead involved with context switching
	-- have to write more lines of codes to accomplish the same task
	-- multithreaded applications are difficult to write, understand, debug and maintain 

# NOTE: only use multithreading when the advantages of doing so outweighs the disadvantages 

-----------------------------------------------------------------------------------------------------------

# Performance implication of a multithreaded program

# On a machine that has multiple processors:

-- multiple threads can execute application code in parallel on different cores

e.g:

-- if there are 2 thread and 2 cores
-- each thread would run on individual core 
-- this means performance is better 

-- if two threads take 10 milli-second each to complete
-- then on machine with 2 processor - total time taken to execute is 10 milli-seconds

------------------------------------------------------------------------------------------------------

# On a machine that has a single processor

-- multiple threads execute one after the other or wait until one thread finishes
-- it is not possible for a single processor system to execute multiple threads in paralled
-- since the operating system switches between the threads so fast
-- it just gives us the illusion that threads run in parallel

-- on a single core/processor machine - multiple threads can affect performance negatively
-- as there is overhead involved with context switching

e.g:

-- if two threads take 10mill-seconds each to complete
-- then on machine with 1 processor the total time taken is: 
	==> 20 milli-seconds + (thread context switching time, if any) 

------------------------------------------------------------------------------------------------------

e.g

- use two threads for two seperate functions - check time elapsed
-- do not use thread for the functions - check time elapsed

-- in multi processor sytem time taken by threads will always be less than no thread solution 











